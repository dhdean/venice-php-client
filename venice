#!/usr/bin/env php
<?php

require_once(__DIR__.'/Conversations.php');

class Venice {

    private $path;
    private $token;
    private $conversations;
    private $personas;

    public function __construct(array $ini)
    {
        if (!isset($ini['CONFIG']) || !$ini['CONFIG']) {
            throw new \Exception('INI file is missing CONFIG section.');
        }
        if (!isset($ini['CONFIG']['conversations']) || !$ini['CONFIG']['conversations']) {
            throw new \Exception('INI file is missing conversations path.');
        }
        $this->conversations = new Conversations($ini['CONFIG']['conversations']);
        $this->path = $ini['CONFIG']['conversations'];
        if (!isset($ini['CONFIG']['token']) || !$ini['CONFIG']['token']) {
            throw new \Exception('INI file is missing API token.');
        }
        $this->token = $ini['CONFIG']['token'];
        if (isset($ini['PERSONA']) && count($ini['PERSONA'])) {
            $this->personas = $ini['PERSONA'];
        } else {
            $this->personas = [];
        }
    }

    public function newConversation() {
        return $this->conversations->newConversationId();
    }

    private function newQuery()
    {
        return [
            "model" => "venice-uncensored", 
            "messages" => [
            ],
            "stream" => false
        ];
    }

    private function query($body) {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, 'https://api.venice.ai/api/v1/chat/completions');
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($body));

        $headers = [
            'Authorization: Bearer '.$this->token,
            'Content-Type: application/json'
        ];

        curl_setopt($ch, CURLOPT_USERAGENT, 'Curl (vfan)');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        if (!empty($headers)) {
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        }
        $response = curl_exec($ch);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        try {
            $output = json_decode($response, true, 32);
            if (!$output) {
                throw new \Exception('Failed to parse JSON response.');
            }
            return $output;
        } catch (\Exception $e) {
            return [
                'result' => '',
                'error' => [
                    'code' => (($httpcode == '200' ) ? '99999' : $httpcode),
                    'message' => "Invalid JSON Response from API.  HTTP Code: $httpcode, Response: $response"
                ]
            ];
        }
    }

    public function askQuestion(string $question, ?string $persona)
    {
        $conversationId = $this->conversations->getCurrentConversationId();
        $convo = $this->conversations->getConversation($conversationId);
        $query = $this->newQuery();
        if ($persona && isset($this->personas[$persona])) {
            $question = $this->personas[$persona]."\n".$question;
        }
        $convo[] = ['role' => 'user', 'content' => $question];
        $query['messages'] = $convo;
        $response = $this->query($query);
        $responses = [];
        if (!isset($response['choices'])) {
            throw new \Exception("Got an unexpected response: ".json_encode($response));
        }
        foreach ($response['choices'] as $choice) {
            $responses[] = [
                'role' => 'assistant', 
                'content' =>($choice['message']['content'] ?? 'null')
            ];
        }
        foreach ($responses as $resp) {
            $convo[] = $resp;
        }
        $this->conversations->saveConversation($conversationId, $convo);
        return $responses;
    }

    public function listConversations()
    {
        $list = [];
        $conversations = $this->conversations->getConversations();
        foreach ($conversations as $conversation) {
            $substr = substr($conversation['id']." : ".$conversation['preview'], 0, 120);
            if (strlen($substr) >= 120) {
                $substr .= '...';
            }
            $list[] = "(".$conversation['index'].") ".$substr;
        }
        return implode("\n", $list);
    }

    public function currentConversation()
    {
        $conversationId = $this->conversations->getCurrentConversationId();
        $convo = $this->conversations->getConversation($conversationId);
        return $conversationId." : ".($convo[0]['content'] ?? 'null');
    }

    public function switch(int $id)
    {
        if ($id < 1000) {
            $conversations = $this->conversations->getConversations();
            foreach($conversations as $conversation) {
                if ($conversation['index'] == $id) {
                    $id = $conversation['id'];
                    break;
                }
            }
        }
        $this->conversations->setCurrentConversationId($id);
        return $this->currentConversation();
    }

    public function getConversationById(int $id)
    {
        if ($id < 1000) {
            $conversations = $this->conversations->getConversations();
            foreach($conversations as $conversation) {
                if ($conversation['index'] == $id) {
                    return $conversation;
                    break;
                }
                if ($conversation['id'] == $id) {
                    return $conversation;
                    break;
                }
            }
        }
        throw new \Exception('Conversation does not exist.');
    }

    public function trash(int $id)
    {
        return $this->conversations->trash($id);
    }

    public function replay()
    {
        print("\n");
        $conversationId = $this->conversations->getCurrentConversationId();
        $convo = $this->conversations->getConversation($conversationId);
        foreach($convo as $comment) {
            if ($comment['role'] == 'user') {
                print("\n----------------------User---------------------------\n");
            } else {
                print("\n=====================Venice==========================\n");
            }
            print($comment['content']."\n");
        }
    }

    public function listPersonas()
    {
        print("\n");
        foreach($this->personas as $id => $persona){
            print("$id : $persona\n");
        }
    }
}

function usage()
{
    $usage  = "venice new|ask 'question' [persona <persona>] (Ask question on an existing conversation, or create a new one)\n";
    $usage .= "venice ls                 (List conversations)\n";
    $usage .= "venice current            (Show current conversation)\n";
    $usage .= "venice switch <conv id>   (Switch to another conversation id)\n";
    $usage .= "venice replay             (Replay conversation)\n";
    $usage .= "venice trash <conv id>    (Trash a conversation)\n";
    return $usage;
}

if (count($argv) < 2) {
    die(usage());
}

if (!in_array($argv[1], ['ask','new','ls','switch','current','replay','trash','ps'])) {
    print("\nInvalid action '{$argv[1]}'\n");
    die(usage());
}

$venice = new Venice(parse_ini_file(__DIR__.'/vconf.ini', true));

try { 
    switch ($argv[1]) {
        case 'new':
            $venice->newConversation();
        case 'ask':
            print("\n\n");
            $responses = $venice->askQuestion($argv[2], $argv[3] ?? null);
            foreach ($responses as $response) {
                print(($response['content'] ?? 'null')."\n");
            }
            break;
        case 'ls':
            print("\n\n".$venice->listConversations()."\n");
            break;
        case 'ps':
            print("\n\n".$venice->listPersonas()."\n");
            break;
        case 'current':
            print("\n\n".$venice->currentConversation()."\n");
            break;
        case 'switch':
            print("\n\n".$venice->switch($argv[2])."\n");
            break;
        case 'replay':
            print("\n\n".$venice->replay()."\n");
            break;
        case 'trash':
            $conversation = $venice->getConversationById($argv[2]);
            print("\n\n(".$conversation['index'].") ".$conversation['id']." : ".$conversation['preview']."\n");
            $confirmation = readline("Are you sure you want to trash this conversation? (y/n): ");
            if (strtolower($confirmation) === 'y') {
                if ($venice->trash($conversation['id'])) {
                    print("\n\n Trashed ".$conversation['id']."\n");
                } else {
                    throw new \Exception('Failed to trash '.$conversation['id']);
                }
            } else {
                print "\n\nAction cancelled.\n";
            }
            break;
    }
} catch (\Exception $e) {
    print("\nERROR: ".$e->getMessage()."\n");
}
